
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.concurrent.*;

/**
 * Created by gurkiratsingh on 7/6/16.
 */


public class Scraper{
    public static final int START_QUEUE = 0;
    public static final int END_QUEUE = 2000000;
    public static final String READ_FILE_NAME = "./Extracts/2mil_ids.json";
    public static final int NUM_THREADS = 180;
    public static final String PHANTOM_EXE =  "./phantomjs";
    public static final String USR_AGENT_FILE = "./Extracts/user_agent.txt";


    public static int counter = START_QUEUE;
    public static int num_skipped = 0;
    private BlockingQueue<String> queue = new ArrayBlockingQueue<String>(END_QUEUE - START_QUEUE);
    private ArrayList<String> usernames = new ArrayList<String>();
    private Worker[] workers = new Worker[NUM_THREADS];

    public static void main(String[] args){

        Scraper scraper = new Scraper();
        scraper.readJson();
        scraper.addToQueue();
        scraper.spawnBrowsers();
        scraper.startThreads();


    }
    private void readJson(){
        JSONParser parser = new JSONParser();

        try{
            JSONObject jsonObject = (JSONObject) parser.parse(new FileReader(READ_FILE_NAME));
            Iterator<JSONObject> iterator = jsonObject.values().iterator();
            while (iterator.hasNext()){
                JSONObject valueObject = iterator.next();
                String username = (String) valueObject.get("username");
                usernames.add(username);
            }
        }catch (Exception e){
            System.out.println(e.getMessage());
        }
    }

    private void addToQueue(){
        try{
            for (int i = START_QUEUE; i < END_QUEUE; i++){
                queue.put(usernames.get(i));
            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            usernames = null;
        }
    }

    private void spawnBrowsers(){
        for (int i = 0; i < workers.length; i++){
            Worker worker = new Worker(queue);
            worker.setDaemon(true);
            worker.setPriority(Thread.MAX_PRIORITY);
            workers[i] = worker;
        }
    }

    private void startThreads(){
        for (int i = 0; i < workers.length; i++){
            workers[i].start();
        }
        for (int i = 0; i < workers.length; i++){
            try{
                workers[i].join();
            }catch (Exception e){
                e.printStackTrace();
            }

        }
    }
}
