
import org.openqa.selenium.*;
import org.openqa.selenium.phantomjs.PhantomJSDriver;
import org.openqa.selenium.phantomjs.PhantomJSDriverService;
import org.openqa.selenium.remote.DesiredCapabilities;
import eu.bitwalker.useragentutils.UserAgent;
import java.util.ArrayList;
import java.util.concurrent.BlockingQueue;

/**
 * Created by gurkiratsingh on 7/6/16.
 */
class Worker extends Thread implements Cred{
    private static final String BASE_URL = "https://mbasic.facebook.com/";
    private static final String SECURITY_CHECK = "Security Check";
    private static final String FIND_ACCOUNT = "Find Your Account";

    protected BlockingQueue<String> queue;
    public WebDriver driver;

    public Worker(BlockingQueue<String> q){
        this.queue = q;
        initDriver();
    }

    public void run(){

        try {
            while (!queue.isEmpty()) {
                String username = queue.take();
                try{
                    driver.get(BASE_URL);
                    Scraper.counter++;

                    WebElement pass_elem = driver.findElement(By.linkText("Forgot Password?"));
                    pass_elem.click();
                    WebElement usr_elem = driver.findElement(By.name("email"));
                    usr_elem.clear();
                    usr_elem.sendKeys(username);
                    usr_elem.sendKeys(Keys.RETURN);

                    if (driver.getTitle() != SECURITY_CHECK && driver.getTitle() != FIND_ACCOUNT){
                        try {
                            WebElement email_elem = driver.findElement(By.xpath(
                                    "//input[@name='recover_method'][@value='send_email']"));
                            email_elem.click();
                        }catch (Exception e){}

                        try {
                            WebElement cont_elem = driver.findElement(By.name("reset_action"));
                            cont_elem.click();
                        }catch(Exception e){
                            throw new Exception(driver.getTitle());
                        }

                        System.out.println(String.format("SUCCESS: %s %s %d", driver.getTitle(),
                                username, Scraper.counter));
                    }else{
                        throw new Exception(driver.getTitle());
                    }
                }catch (Exception e){
                    Scraper.num_skipped++;
                    System.out.println(String.format("FAILED: %s -NUM_SKIP: %d -COUNTER: %d",
                            username, Scraper.num_skipped, Scraper.counter));
                }finally{
                    driver.manage().deleteAllCookies();
                }

            }
        }catch (InterruptedException e){
            System.out.println(e.getMessage());
        }finally {
            driver.quit();
            queue = null;
        }
    }
    private void initDriver(){
        DesiredCapabilities capabilities =   DesiredCapabilities.phantomjs();
        capabilities.setCapability(PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY,
                Scraper.PHANTOM_EXE);
        capabilities.setJavascriptEnabled(true);

        ArrayList<String> proxy = new ArrayList<String>();
        proxy.add("--proxy=" + PROX_URL + ":" + PORT);
        proxy.add("--proxy-auth=" + USER + ":" + PASS);
        proxy.add("--proxy-type=http");
        capabilities.setCapability(PhantomJSDriverService.PHANTOMJS_CLI_ARGS, proxy);

        String useragent = LocalUserAgent.getUserAgent();
        UserAgent ua_parser = UserAgent.parseUserAgentString(useragent);
        String browser_version = String.valueOf(ua_parser.getBrowserVersion());
        String platform = String.valueOf(ua_parser.getOperatingSystem()).toLowerCase();

        capabilities.setBrowserName("Chrome");
        capabilities.setVersion(browser_version);

        if (platform.contains("mac")){
            capabilities.setPlatform(Platform.MAC);
        }else if (platform.contains("linux")){
            capabilities.setPlatform(Platform.LINUX);
        }else{
            capabilities.setPlatform(Platform.WINDOWS);
        }

        capabilities.setCapability("phantomjs.page.settings.userAgent", useragent);
        driver = new PhantomJSDriver(capabilities);
    }

}